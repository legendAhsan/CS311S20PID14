//     Activity Schedular
//INPUT: The input of this fuction is a 3d array of  class details and Available slots
//       Available slots is a array of 45(or any other user input usually 45) length.
//       We will take input of available slots in days of weak and lectures and then
//       they will be converted in this format to make the code easy.
//		 Data that user enters, will be stored in a 3d array that will be passed to
//       the below fuction.
//       First dim of array consists of classes, second consists of teachers and third
//       contains their further details. 
//       In 3rd dim 1 index is for teacher's name, second for Teacher's specific number, 
//       3rd for course, 4th for credit hours and fifth for weather these hours are 
//       consective or not.
//          Orignal project will consist on some more functionalities that will be added latter
//          like they can be added by changing the order of recieving data.
//
//Output: The output is a timetabble that is stored in a 2d array of Final time table.
//        In final phase of project this will be shown attractively.
//        
//Priorites: The priorities of this algorthm are following
//            First of all is to maintain minimum gap b/w the lectures of students.
//			  secondly to maintain minimum gap b/w the lectures teachers
// 			  then minimum use of classrooms.
//			  Some prioities will be presented as a choice to the user i.e maximium lectures
//			  in the start of the weak or equally distributed lectures through out the weak.
......................................................................................................
Time_Table_Generator(Class_Details[][][], Available_Slots[45])
 
	
	Final_Time_Table[][Available_Slots.length]
	Teachers[][45];
	for class in dim1 of classDetails
		Lecture_NO = 1;
		int Total_Credit_Hours =0;
		for(i=0; i<Class_Details[class].length_of_dim2; i++)

			Total_Credit_Hours +=Class_Details[class][i][4]
		
		while(Total_Credit_Hours=>1)
			For each teacher in dim2 of classDetails[class]
				Teacher_No=cd[class][teacher][2];
				if(availble_slots[lectureNo]==0])
				
					lecture_No++;
				
				else if(Teachers[Teacher_No][lecture_No]==NULL && Class_Details[class][teacher][4]!=0 && Class_Details[class][teacher][5]=0)
				
					Final_Time_Table[class][lecture_No]==Class_Details[class][teacher][1]+Class_Details[class][teacher][3];
					Teachers[Teacher_No][ln]=class+Class_Details[class][teacher][3];
					Class_Details[class][teacher][4]--;
					Total_Credit_Hours--;
					lecture_No++;
				
				else if(Class_Details[class][teacher][5]=1 && Class_Details[class][teacher][4]!=0 )
				
					Allow=1;
					for(i=lecture_No; i<(lecture_No+Class_Details[class][teacher][4]); i++)
					
						if(teacher[Teacher_No][i]==!NULL or Available_Slots[i]!==1)
						
							Allow=0;
							break;
						
					
					if(Allow)
					
								for(i=lecture_No; i<(lecture_No+Class_details[class][teacher][4]); i++)
								
									Final_Time_Table[class][i]==Class_details[class][teacher][1]+Class_Details[class][teacher][3];
									Teachers[Teacher_No][i]=class+Class_Details[class][teacher][3];
									Class_details[class][teacher][4]--;
									Total_Credit_Hours--;
									lecture_No++;
								
					
							
Minimum_Room_Allocator(Final_Time_Table[n][Available_Slots.length])

	for(Room_No=1; Room_No<=Final_Time_Table.dim1_length; Room_No++)
	
		for(lecture_No=1; lecture_No<=Final_Time_Table.dim2_length; lecture_No++)
		
			for(i=Room_No; i<= Final_Time_Table_dim1_length; i++)
			
				if(Available_Slot[lecture_No]=1 && (Final_Time_TableT[i][Lecture_No] not contain "R. No . " ) && 
				Final_Time_Table[i][lecture_No]!=null && Final_Time_Table[i][lecture_No-1]!=Final_Time_Table[i][lecture_No])
					for(int j=lecture_No; j< Final_Time_Table.dim2_length; J++)	
					
						Final_Time_Table[i][j]+= "R. No . "+Room_No;
						if(Final_Time_Table[i][j]!=Final_Time_Table[i][j+1])
						
							break;
						
					break;
		
...............................................................................................	













