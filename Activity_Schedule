 static void Minimum_Room_Allocator(string[, ] Final_Time_Table)
        {
            for (int Room_No = 1; Room_No <= Final_Time_Table.dim1_length; Room_No++)
            {
                for (int lecture_No = 1; lecture_No <= Final_Time_Table.dim2_length; lecture_No++)
                {
                    for (int i = Room_No; i <= Final_Time_Table.dim1_length; i++)
                    {
                        if(Available_Slot[lecture_No] = 1 && !(Final_Time_Table[i][Lecture_No].Contains("R. No . "))   && Final_Time_Table[i][lecture_No] != null && Final_Time_Table[i][lecture_No - 1] != Final_Time_Table[i][lecture_No]){
                            for (int j = lecture_No; j < Final_Time_Table.dim2_length; J++)
                            {
                                Final_Time_Table[i][j] += "R. No . " + Room_No;
                                if (Final_Time_Table[i][j] != Final_Time_Table[i][j + 1])
                                {
                                    break;
                                }
                            }
                            break;
                        }
                    }
                }
            }
        }




 static void Time_Table_Generator(int[,,] Class_Details, int[] Available_Slots)
        {
            string[,] Final_Time_Table;
            string[] Teachers=new string[45];
            int Total_Credit_Hours = 0;
            for (int clas=0; clas<Class_Details.GetLength(0); clas++){
                int Lecture_NO = 1;

                for(int i=0; i< Class_Details.GetLength(1); i++){
                    Total_Credit_Hours +=  Class_Details[clas,i,4];
                }
                while(Total_Credit_Hours>=1){
                    for(int teach=0; teach<Class_Details.GetLength(1); teach++){
                        Teacher_No=cd[class][teacher][2];
                        if(availble_slots[lectureNo]==0]){
                            lecture_No++;
                        }
                        else if(Teachers[Teacher_No][lecture_No]==NULL && Class_Details[class][teacher] [4]!=0 && Class_Details[class][teacher] [5]=0){
                            Final_Time_Table[class][lecture_No]==Class_Details[class][teacher] [1]+Class_Details[class][teacher] [3];
                            Teachers[Teacher_No][ln]=class+Class_Details[class][teacher] [3];
                            Class_Details[class][teacher] [4]--;
					        Total_Credit_Hours--;
					        lecture_No++;
                        }
                        else if(Class_Details[class][teacher] [5]=1 && Class_Details[class][teacher] [4]!=0 ){
                            Allow=1;
					        for(i=lecture_No; i<(lecture_No+Class_Details[class][teacher] [4]); i++){
                                if(teacher[Teacher_No][i]==!NULL or Available_Slots[i]!==1){
                                    Allow=0;
							        break;
                                }
                            }
                            if(Allow){
                                for(i=lecture_No; i<(lecture_No+Class_details[class][teacher] [4]); i++){
                                    Final_Time_Table[class][i]==Class_details[class][teacher] [1]+Class_Details[class][teacher] [3];
									Teachers[Teacher_No][i]=class+Class_Details[class][teacher] [3];
									Class_details[class][teacher] [4]--;
									Total_Credit_Hours--;
									lecture_No++;
                                }
                            }
                        }
                    }
                }
            }
        }
