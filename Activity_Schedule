 static string[,] Time_Table_Generator(string[,,] Class_Details, int[] Available_Slots)
        {
        
            string [,] Final_Time_Table = new string [12, 45];
            string [,] Teachers = new string[100, 45];                              
            int Total_Credit_Hours = 0;
            for (int clas = 0; clas < Class_Details.GetLength(0); clas++)
            {
                int Lecture_NO = 1;

                for (int i = 0; i < Class_Details.GetLength(1); i++)
                {
                    Total_Credit_Hours += int.Parse(Class_Details[clas, i, 4]);
                }
                while (Total_Credit_Hours >= 1)
                {
                    for (int teach = 0; teach < Class_Details.GetLength(1); teach++)
                    {
                        int Teacher_No = int.Parse(Class_Details[clas, teach, 2]);
                        if (Available_Slots[Lecture_NO] == 0)
                        {
                            Lecture_NO++;
                        }
                        else if ((Teachers[Teacher_No, Lecture_NO] == null) && (int.Parse(Class_Details[clas, teach, 4]) != 0) && (int.Parse(Class_Details[clas, teach, 5]) == 0))
                        {
                            Final_Time_Table[clas, Lecture_NO] = Class_Details[clas, teach, 1] + Class_Details[clas, teach, 3];
                            Teachers[Teacher_No, Lecture_NO] = clas.ToString() + Class_Details[clas, teach, 3];         
                            int t = int.Parse(Class_Details[clas, teach, 4]) - 1;
                            Class_Details[clas, teach, 4]=   t.ToString();
                            Total_Credit_Hours--;
                            Lecture_NO++;
                        }
                        else if (int.Parse(Class_Details[clas, teach, 5]) ==1 && int.Parse(Class_Details[clas, teach, 4]) != 0)
                        {
                            bool Allow = true;
                            for (int i = Lecture_NO; i < (Lecture_NO + int.Parse(Class_Details[clas, teach, 4])); i++)
                            {
                                if (Teachers[Teacher_No, i] != null || Available_Slots[i] != 1)
                                {        
                                    Allow = false;
                                    break;
                                }
                            }
                            if (Allow)
                            {
                                for (int i = Lecture_NO; i < (Lecture_NO + int.Parse(Class_Details[clas, teach, 4])); i++)
                                {
                                    Final_Time_Table[clas, i] = Class_Details[clas, teach, 1] + Class_Details[clas, teach, 3];
                                    Teachers[Teacher_No, i] = clas + Class_Details[clas, teach, 3];
                                    int t = int.Parse(Class_Details[clas, teach, 4]) - 1;
                                    Class_Details[clas, teach, 4] = t.ToString();
                                  //  Class_Details[clas, teach, 4]--;
                                    Total_Credit_Hours--;
                                    Lecture_NO++;
                                }
                            }
                        }
                    }
                }
            }
            return Final_Time_Table;
        }



    


        static void Minimum_Room_Allocator(string[] args, string[, ] Final_Time_Table)
        {
            for (int Room_No = 1; Room_No <= Final_Time_Table.GetLength(0); Room_No++)
            {
                for (int lecture_No = 1; lecture_No <= Final_Time_Table.GetLength(1); lecture_No++)
                {
                    for (int i = Room_No; i <= Final_Time_Table.GetLength(0); i++)
                    {
                        if(Available_Slot[lecture_No] = 1 && !(Final_Time_Table[i, lecture_No].Contains("R. No . "))   && Final_Time_Table[i][lecture_No] != null && Final_Time_Table[i][lecture_No - 1] != Final_Time_Table[i][lecture_No]){
                            for (int j = lecture_No; j < Final_Time_Table.GetLength(1); j++)
                            {
                                Final_Time_Table[i,j] += "R. No . " + Room_No;
                                if (Final_Time_Table[i,j] != Final_Time_Table[i,j + 1])
                                {
                                    break;
                                }
                            }
                            break;
                        }
                    }
                }
            }
        }
